version: '3.8'

services:
  # Reverse Proxy and Load Balancer (Traefik)
  traefik:
    image: traefik:v2.10
    container_name: quvel-traefik
    command:
      - '--api.insecure=true' # Enable Traefik dashboard (http://localhost:8080)
      - '--providers.docker=true' # Enable Docker provider to detect running containers
      - '--providers.docker.exposedbydefault=false' # Require explicit label exposure for security
      - '--entrypoints.web.address=:80' # HTTP Entrypoint (unencrypted)
      - '--entrypoints.websecure.address=:443' # HTTPS Entrypoint (encrypted)
      - '--entrypoints.websecure.http.tls=true' # Enable TLS on the HTTPS entrypoint
      - '--providers.file.directory=/certs' # Load TLS certificates from a directory
      - '--providers.file.watch=true' # Auto-reload if certificate files change
    ports:
      - '80:80' # Expose HTTP for domain routing
      - '443:443' # Expose HTTPS (TLS/SSL)
      - '8080:8080' # Expose Traefik dashboard for monitoring
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro' # Allow Traefik to read Docker container data
      - '${PWD}/docker/certs:/certs:ro' # Mount local certificates folder into the container
      - '${PWD}/docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro' # Mount custom config
      - '${PWD}/docker/traefik/dynamic:/traefik:ro'
    networks:
      - quvel-network

  # Backend (Laravel API)
  app:
    build:
      context: ../backend # Point to Laravel backend source
      dockerfile: ../docker/backend.Dockerfile # Use custom backend Dockerfile
    container_name: quvel-app

    working_dir: /var/www # Set working directory for Laravel

    volumes:
      - ../backend:/var/www # Sync backend files for live development
      - /var/www/vendor # Keep vendor dependencies inside the container for performance
      - ../backend/storage/debug:/var/www/storage/debug # Expose coverage reports
    depends_on:
      - mysql # Ensure MySQL is started before this container
      - redis # Ensure Redis is started before this container
    command: [
        '/bin/sh',
        '-c',
        'composer install && php artisan serve --host=0.0.0.0 --port=8000',
      ] # Run Laravel API server after installing dependencies
    labels:
      - 'traefik.enable=true' # Enable Traefik proxy for this service
      - 'traefik.http.routers.api.rule=Host(`api.quvel.127.0.0.1.nip.io`)' # Route requests matching this domain to the API
      - 'traefik.http.routers.api.entrypoints=websecure' # Enforce HTTPS for API
      - 'traefik.http.routers.api.tls=true' # Enable TLS for this route
      - 'traefik.http.services.api.loadbalancer.server.port=8000' # Route traffic to Laravel on port 8000
    networks:
      - quvel-network

  # Laravel Assets Builder
  asset-builder:
    image: node:22-alpine
    container_name: quvel-asset-builder
    working_dir: /var/www
    volumes:
      - ../backend:/var/www
    command: ['/bin/sh', '-c', 'npm install && npm run build']
    networks:
      - quvel-network

  # Frontend (Quasar SSR)
  frontend:
    build:
      context: ../frontend # Point to frontend source
      dockerfile: ../docker/frontend.Dockerfile # Use custom frontend Dockerfile
    container_name: quvel-frontend
    restart: unless-stopped
    working_dir: /frontend # Set working directory for Quasar
    volumes:
      - ../frontend:/frontend # Sync frontend files for live development
      - /frontend/node_modules # Keep node_modules inside the container for performance
      - '${PWD}/docker/certs:/certs' # Mount local certificates folder into the container
    command: ['/bin/sh', '-c', 'yarn install && yarn dev:ssr'] # Run Quasar dev server
    networks:
      - quvel-network

  # Vitest UI
  vitest-ui:
    build:
      context: ../frontend # Use the same frontend source
      dockerfile: ../docker/frontend.Dockerfile # Use the same Dockerfile
    container_name: quvel-vitest
    working_dir: /frontend
    volumes:
      - ../frontend:/frontend # Sync frontend files
      - /frontend/node_modules
      - '${PWD}/docker/certs:/certs' # Mount local certificates folder into the container
    command: ['/bin/sh', '-c', 'yarn install && yarn test:unit:ui'] # Only run Vitest UI here
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.vitest-ui.rule=Host(`coverage.quvel.127.0.0.1.nip.io`)'
      - 'traefik.http.routers.vitest-ui.entrypoints=websecure'
      - 'traefik.http.routers.vitest-ui.tls=true'
      - 'traefik.http.routers.vitest-ui.service=vitest-ui'
      - 'traefik.http.services.vitest-ui.loadbalancer.server.port=51204'
    networks:
      - quvel-network

  # PHPUnit Coverage Reports (Nginx)
  coverage:
    image: nginx:latest
    container_name: quvel-coverage
    volumes:
      - ../backend/storage/debug/coverage:/usr/share/nginx/html:ro # Serve PHPUnit reports as static files
    labels:
      - 'traefik.enable=true' # Enable Traefik proxy for this service
      - 'traefik.http.routers.coverage.rule=Host(`coverage-api.quvel.127.0.0.1.nip.io`)' # Route requests to coverage
      - 'traefik.http.routers.coverage.entrypoints=websecure' # Enforce HTTPS for coverage
      - 'traefik.http.routers.coverage.tls=true' # Enable TLS for this route
      - 'traefik.http.services.coverage.loadbalancer.server.port=80' # Route traffic to Nginx on port 80
    networks:
      - quvel-network

  # Database (MySQL)
  mysql:
    image: mysql:8
    container_name: quvel-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root # Root password for MySQL
      MYSQL_DATABASE: quvel # Default database name
      MYSQL_USER: quvel_user # Database username
      MYSQL_PASSWORD: quvel_password # Database password
    ports:
      - '3306:3306' # Expose MySQL on default port for external connections
    volumes:
      - mysql_data:/var/lib/mysql # Persistent storage for database data
    networks:
      - quvel-network

  # In-Memory Cache (Redis)
  redis:
    image: redis:latest
    container_name: quvel-redis
    ports:
      - '6379:6379' # Expose Redis for session caching, queues, etc.
    networks:
      - quvel-network

# Docker Network
networks:
  quvel-network:

# Persistent Volume for MySQL
volumes:
  mysql_data: # Persistent storage for MySQL database
